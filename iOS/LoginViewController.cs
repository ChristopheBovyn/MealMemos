// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Plugin.CloudFirestore;
using Plugin.FirebaseAuth;
using UIKit;

namespace MealMemos.iOS
{
    public partial class LoginViewController : UIViewController
    {
        public LoginViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            this.loginBtn.TouchUpInside += LoginAsync;
            this.resetBtn.TouchUpInside += Reset;
        }

        private async void LoginAsync(object sender, EventArgs e)
        {
            var controller = this.Storyboard.InstantiateViewController("MainViewController") as MainViewController;
            if (this.IsValidLogin())
            {
                var success = await this.SignInFirebaseAsync(this.emailTextView.Text, this.passTextView.Text);

                if (success)
                {
                    this.NavigationController.PushViewController(controller, true);
                }
                else
                {
                    Console.WriteLine("Mealmemos : LoginViewController : Erreur creation compte");
                }
            }
            
        }

        private async Task<bool> SignInFirebaseAsync(string email, string password)
        {
            try
            {
                //Firebase.Auth.Auth.DefaultInstance.CreateUserAsync()

                var result = await CrossFirebaseAuth.Current.Instance.CreateUserWithEmailAndPasswordAsync(email, password);
                if (result.User != null)
                {
                    return true;
                }
            }catch (Exception e)
            {
                Console.WriteLine(e);
                return false;
            }
           
            return false;
        }

        private bool IsValidLogin()
        {
            if (this.IsValidEmail() &&
                this.passTextView.Text != String.Empty &&
                this.confirmTextView.Text != String.Empty &&
                this.confirmTextView.Text.Equals(this.passTextView.Text))
            {
                return true;
            }

            return false;
        }

        private void Reset(object sender, EventArgs e)
        {
            this.emailTextView.Text = String.Empty;
            this.passTextView.Text = String.Empty;
            this.confirmTextView.Text = String.Empty;
        }

        private bool IsValidEmail()
        {
            try
            {
                return Regex.IsMatch(this.emailTextView.Text,
                    @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
                    @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-0-9a-z]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
                    RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
        }
    }
}
