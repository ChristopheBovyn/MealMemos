// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using AsyncAwaitBestPractices;
using GalaSoft.MvvmLight.Ioc;
using MealMemos.Interfaces;
using UIImageExtension;
using UIKit;
using MealMemos.Extensions;
using System.Collections.Generic;
using GPS.iOS;
using Firebase.Auth;
using Firebase.CloudFirestore;
using Foundation;
using MealMemos.Models;

namespace MealMemos.iOS
{
    public partial class MainViewController : UIViewController
    {
        private TableViewSource viewSource;
        private DateTime currrentDateTime = DateTime.UtcNow;
        private MealDocument mealDocument;
        public static string DocumentId = String.Empty;

        public MainViewController(IntPtr handle) : base(handle)
        {

        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            this.registerServices();
            this.SetLayouts();
            this.SetViewsAction();
            this.SetTabBarItems();
            this.InitData();
        }

        private void SetLayouts()
        {
            this.currentDateBtn.SetTitle(this.DateTimeToDefaultFormat(), UIControlState.Normal);
            this.mealTableView.TranslatesAutoresizingMaskIntoConstraints = false;
            this.mealTableView.SeparatorStyle = UITableViewCellSeparatorStyle.None;
            this.mealTableView.SetEditing(true, true);
            this.applicationTabBar.BackgroundColor = UIColor.FromName("applicationColor");
            this.addDishBtn.Layer.CornerRadius = this.addDishBtn.Frame.Width / 2;
        }

        private void SetViewsAction()
        {
            this.applicationTabBar.ItemSelected += SwitchMeal;
            this.previousBtn.TouchUpInside += previousAction;
            this.nextBtn.TouchUpInside += nextAction;
            this.currentDateBtn.TouchUpInside += OpenDatePicker;
            this.addDishBtn.TouchUpInside += AddDishAction;
        }

        private void InitData()
        {
            this.viewSource = new TableViewSource(new List<string>(), this.DateTimeToDefaultFormat());
            this.viewSource.Identifier = this.applicationTabBar.SelectedItem.Title;
            this.viewSource.DocumentId = DocumentId;
            this.datepicker.Mode = UIDatePickerMode.Date;
            this.datepicker.SetDate((NSDate)this.currrentDateTime, false);
            this.mealTableView.Source = this.viewSource;
            this.mealDocument = new MealDocument();
            this.LoadDishesAsync().SafeFireAndForget();
        }

        private void SwitchMeal(object sender, UITabBarItemEventArgs e)
        {
            this.viewSource = new TableViewSource(new List<string>(), this.DateTimeToDefaultFormat());
            this.viewSource.Identifier = this.applicationTabBar.SelectedItem.Title;
            this.viewSource.DocumentId = DocumentId;
            this.mealTableView.Source = this.viewSource;
            this.resetTableView();
            this.mealTableView.ReloadData();
        }

        private void AddDishAction(object sender, EventArgs e)
        {
            this.OpenPopup().SafeFireAndForget();
        }

        #region actions

        private void previousAction(object sender, EventArgs e)
        {
            this.currrentDateTime = this.currrentDateTime.AddDays(-1);
            this.currentDateBtn.SetTitle(this.DateTimeToDefaultFormat(), UIControlState.Normal);
            this.InitData();
            this.CloseDatePicker();
            this.resetTableView();
        }

        private void nextAction(object sender, EventArgs e)
        {
            this.currrentDateTime = this.currrentDateTime.AddDays(1);
            this.currentDateBtn.SetTitle(this.DateTimeToDefaultFormat(), UIControlState.Normal);
            this.InitData();
            this.CloseDatePicker();
            this.resetTableView();
        }

        private void CloseDatePicker()
        {
            this.datepicker.Hidden = true;
            this.verticalSpace.Constant = 0;
        }

        private void OpenDatePicker(object sender, EventArgs e)
        {
            if (this.datepicker.Hidden)
            {
                this.datepicker.Hidden = false;
                this.verticalSpace.Constant = 150;
            }
            else
            {
                if (this.currrentDateTime.Date != (DateTime)this.datepicker.Date)
                {
                    this.currrentDateTime = (DateTime)this.datepicker.Date;
                    this.currentDateBtn.SetTitle(this.DateTimeToDefaultFormat(), UIControlState.Normal);
                    this.InitData();
                }
                this.CloseDatePicker();
            }
        }

        #endregion actions

        private void resetTableView()
        {
            this.SetViewSourceData();
            this.mealTableView.ReloadData();
        }

        private string DateTimeToDefaultFormat()
        {
            return this.currrentDateTime.Date.ToString("yyyy-MM-dd");
        }

        private void SetTabBarItems()
        {
            UIImage breakfast = UIImage.FromBundle("breakfast");
            UIImage diner = UIImage.FromBundle("diner");
            UIImage souper = UIImage.FromBundle("souper");
            UIImage collation = UIImage.FromBundle("collation");
            this.applicationTabBar.SelectedImageTintColor = UIColor.White;
            this.applicationTabBar.SelectedItem = this.applicationTabBar.Items[0];

            this.applicationTabBar.Items[0].Image = breakfast.ResizeImage(0.25f);
            this.applicationTabBar.Items[0].Title = "Breakfast";

            this.applicationTabBar.Items[1].Image = diner.ResizeImage(0.25f);
            this.applicationTabBar.Items[1].Title = "Diner";

            this.applicationTabBar.Items[2].Image = souper.ResizeImage(0.25f);
            this.applicationTabBar.Items[2].Title = "Souper";

            this.applicationTabBar.Items[3].Image = collation.ResizeImage(0.25f);
            this.applicationTabBar.Items[3].Title = "Collation";

        }

        #region Task
        private async Task OpenPopup()
        {
            var result = await SimpleIoc.Default.GetInstance<IMealPopup>().OpenPopupWithResult();
            if (!result.IsNullOrEmpty())
            {
                this.SetDish(result);
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("MealViewController : OpenPopup() : result is null");
            }
        }

        private async Task LoadDishesAsync()
        {
            try
            {
                var itemTitle = this.applicationTabBar.SelectedItem.Title;
                this.viewSource.Items = new List<string>();
                var user = Auth.DefaultInstance.CurrentUser;
                var document = await Firestore.SharedInstance
                                              .GetCollection("meals")
                                              .WhereEqualsTo("user", user.Uid)
                                              .WhereEqualsTo("date", this.DateTimeToDefaultFormat())
                                              .LimitedTo(1)
                                              .GetDocumentsAsync();
                foreach (DocumentSnapshot current in document.Documents)
                {
                    this.SetMealDocumentFromDocument(current);
                    this.viewSource.DocumentId = current.Id;
                    DocumentId = current.Id;
                }
                this.SetViewSourceData();
                this.mealTableView.Source = this.viewSource;
                this.mealTableView.ReloadData();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
        #endregion

        private void SetDish(string dishValue)
        {
            this.viewSource.AddElement(dishValue);
            this.mealTableView.ReloadData();
            this.viewSource.Save();
        }

        private void SetViewSourceData()
        {
            switch (this.applicationTabBar.SelectedItem.Title)
            {
                case "Breakfast":
                    this.viewSource.Items = this.mealDocument.Breakfast;
                    break;
                case "Diner":
                    this.viewSource.Items = this.mealDocument.Diner;
                    break;
                case "Souper":
                    this.viewSource.Items = this.mealDocument.Souper;
                    break;
                case "Collation":
                    this.viewSource.Items = this.mealDocument.Collation;
                    break;
            }
        }

        private void SetMealDocumentFromDocument(DocumentSnapshot document)
        {
            string date = document?.Data[MealDocument.DateKey]?.ToString() ?? string.Empty;
            string userId = document?.Data[MealDocument.UserKey]?.ToString() ?? string.Empty;
            this.mealDocument = new MealDocument(userId, date);
            var listItemTitle = this.GetItemsTitle();
            foreach (var data in document?.Data)
            {
                var mealContent = new List<string>();
                if (listItemTitle.Contains(data.Key?.ToString()))
                {
                    if (data.Value is NSMutableDictionary dictionary)
                    {
                        foreach(var element in dictionary)
                        {
                            mealContent.Add(element.Value.ToString());
                        }
                        this.mealDocument.SetMeal(mealContent, data.Key?.ToString());
                    }
                    if (data.Key?.ToString() == this.applicationTabBar.SelectedItem.Title)
                        this.viewSource.Items = mealContent;
                }
            }
        }

        private List<string> GetItemsTitle()
        {
            List<string> itemTitles = new List<string>();
            foreach (var item in this.applicationTabBar.Items)
            {
                itemTitles.Add(item.Title);
            }
            return itemTitles;
            
        }

        private void registerServices()
        {
            SimpleIoc.Default.Register<IMealPopup>(() => { return new IosMealPopup(this); });
        }
    }
}
